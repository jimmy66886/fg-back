<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzmr.fgback.mapper.CommentMapper">

    <resultMap id="CommentVoResultMap" type="com.zzmr.fgback.vo.CommentVo">
        <result column="comment_id" property="commentId"/>
        <result column="sender_name" property="senderName"/>
        <result column="sender_avatar_url" property="senderAvatarUrl"/>
        <result column="user_id" property="senderId"/>
        <result column="receiver_name" property="receiverName"/>
        <result column="receiver_id" property="receiverId"/>
        <result column="receiver_avatar_url" property="receiverAvatarUrl"/>
        <result column="content" property="content"/>
        <result column="create_time" property="sendDateTime"/>
        <result column="reply_number" property="replyNumber"/>
        <result column="is_liked" property="isLiked"></result>
        <result column="like_count" property="likeCount"></result>
    </resultMap>

    <select id="getTop" resultMap="CommentVoResultMap">
        SELECT c.*,
               (SELECT u.nick_name FROM `user` u WHERE u.user_id = c.user_id)  AS sender_name,
               (SELECT u.avatar_url FROM `user` u WHERE u.user_id = c.user_id) AS sender_avatar_url,
               (SELECT COUNT(*) FROM COMMENT WHERE root_id = c.comment_id)     AS reply_number,
               (SELECT COUNT(*) FROM likes WHERE content_id = c.comment_id AND content_type = 'comment') AS like_count,
               CASE WHEN l.user_id IS NOT NULL THEN 1 ELSE 0 END               AS is_liked
        FROM `comment` c
                 LEFT JOIN `likes` l ON c.comment_id = l.content_id AND l.content_type = 'comment' AND
                                        l.user_id = #{commentDto.userId}
        WHERE c.recipe_id = #{commentDto.recipeId}
          AND c.root_id IS NULL
        ORDER BY c.create_time DESC
    </select>

    <select id="getByTopComment" resultMap="CommentVoResultMap">
        SELECT c.*,
               s.nick_name                                                                               AS sender_name,
               s.avatar_url                                                                              AS sender_avatar_url,
               s.user_id                                                                                 AS sender_id,
               r.nick_name                                                                               AS receiver_name,
               r.avatar_url                                                                              AS receiver_avatar_url,
               r.user_id                                                                                 AS receiver_id,
               (SELECT COUNT(*) FROM likes WHERE content_id = c.comment_id AND content_type = 'comment') AS like_count,
               CASE WHEN l.user_id IS NOT NULL THEN 1 ELSE 0 END                                         AS is_liked
        FROM comment c
                 LEFT JOIN user s ON c.user_id = s.user_id
                 LEFT JOIN user r ON c.to_user_id = r.user_id
                 LEFT JOIN likes l ON c.comment_id = l.content_id AND l.content_type = 'comment' AND
                                      l.user_id = #{commentDto.userId}
        WHERE c.recipe_id = #{commentDto.recipeId}
          AND c.root_id = #{commentDto.rootId}
        ORDER BY c.create_time DESC
    </select>

    <select id="getNewComment" resultType="com.zzmr.fgback.vo.RecentCommentVo">
        SELECT c.comment_id,
               u.nick_name   as sender_name,
               u.avatar_url  as sender_avatar_url,
               u.user_id     as sender_id,
               c.content,
               r.recipe_id,
               r.title,
               c.create_time as send_date_time,
               rc.content    AS original_content
        FROM `comment` c
                 LEFT JOIN `user` u ON c.user_id = u.user_id
                 LEFT JOIN recipe r ON c.recipe_id = r.recipe_id
                 LEFT JOIN `comment` rc ON c.to_comment_id = rc.comment_id
        WHERE (r.recipe_id IN (SELECT recipe_id FROM `comment` WHERE user_id = #{userId}) AND u.user_id != #{userId} AND
               c.root_id IS NULL)
           OR (c.to_user_id = #{userId} AND u.user_id != #{userId})
        ORDER BY c.create_time DESC
    </select>
</mapper>
